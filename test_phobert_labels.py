#!/usr/bin/env python3
"""
Script ki·ªÉm tra label mapping cho PhoBERT - C·∫≠p nh·∫≠t Prompt 1.2
"""

from transformers import pipeline
import json

def test_phobert_label_mapping():
    """
    Test PhoBERT ƒë·ªÉ t√¨m ra mapping ch√≠nh x√°c gi·ªØa LABEL_0/1/2/3 v√† positive/negative/neutral/toxic
    """
    
    print("üîç KI·ªÇM TRA LABEL MAPPING CHO PHOBERT")
    print("=" * 60)
    
    # Load model
    classifier = pipeline(
        'text-classification', 
        model="./phobert-vi-comment-4class",
        tokenizer="./phobert-vi-comment-4class",
        local_files_only=True
    )
    
    # Theo README: positive, negative, neutral, toxic
    # C·∫ßn t√¨m xem LABEL_0/1/2/3 t∆∞∆°ng ·ª©ng v·ªõi label n√†o
    
    print("üìã Test v·ªõi c√°c c√¢u r√µ r√†ng ƒë·ªÉ t√¨m mapping:")
    
    test_cases = [
        # Positive examples
        ("Tuy·ªát v·ªùi qu√°!", "positive"),
        ("Video n√†y hay l·∫Øm!", "positive"), 
        ("C·∫£m ∆°n b·∫°n nhi·ªÅu!", "positive"),
        
        # Negative examples  
        ("T·ªá qu√°", "negative"),
        ("Kh√¥ng hay", "negative"),
        ("Ch√°n l·∫Øm", "negative"),
        
        # Neutral examples
        ("ƒê∆∞·ª£c", "neutral"),
        ("B√¨nh th∆∞·ªùng", "neutral"),
        ("Ok", "neutral"),
        
        # Toxic examples
        ("ƒê·ªì ng·ªëc", "toxic"),
        ("Ngu qu√°", "toxic"), 
        ("Th·∫±ng kh√πa", "toxic"),
    ]
    
    # Collect results
    label_results = {"LABEL_0": [], "LABEL_1": [], "LABEL_2": [], "LABEL_3": []}
    
    for text, expected_type in test_cases:
        result = classifier(text)
        predicted_label = result[0]['label']
        score = result[0]['score']
        
        print(f"Text: '{text}' (expected: {expected_type})")
        print(f"   ‚Üí {predicted_label} (score: {score:.3f})")
        
        label_results[predicted_label].append((text, expected_type, score))
    
    print("\n" + "=" * 60)
    print("üìä PH√ÇN T√çCH MAPPING LABELS:")
    print("=" * 60)
    
    # Analyze patterns
    for label_num in ["LABEL_0", "LABEL_1", "LABEL_2", "LABEL_3"]:
        if label_results[label_num]:
            print(f"\nüè∑Ô∏è  {label_num}:")
            expected_types = [item[1] for item in label_results[label_num]]
            most_common = max(set(expected_types), key=expected_types.count)
            confidence = expected_types.count(most_common) / len(expected_types)
            
            print(f"   C√≥ th·ªÉ l√†: {most_common} (confidence: {confidence:.1%})")
            print(f"   Examples:")
            for text, exp_type, score in label_results[label_num][:3]:
                print(f"      - '{text}' (expected: {exp_type}, score: {score:.3f})")
    
    # Suggested mapping
    print(f"\nüéØ ƒê·ªÄ XU·∫§T LABEL MAPPING:")
    print(f"Based on analysis above:")
    
    # We need to determine the actual mapping from the results
    suggested_mapping = {}
    for label_num in ["LABEL_0", "LABEL_1", "LABEL_2", "LABEL_3"]:
        if label_results[label_num]:
            expected_types = [item[1] for item in label_results[label_num]]
            most_common = max(set(expected_types), key=expected_types.count)
            suggested_mapping[label_num] = most_common
    
    for label_num, meaning in suggested_mapping.items():
        print(f"   {label_num} ‚Üí {meaning}")
    
    return suggested_mapping

if __name__ == "__main__":
    mapping = test_phobert_label_mapping()
    
    # Save mapping to JSON file for later use
    with open("phobert_label_mapping.json", "w", encoding="utf-8") as f:
        json.dump(mapping, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ Label mapping ƒë√£ l∆∞u v√†o phobert_label_mapping.json")
    print(f"üéØ S·ª≠ d·ª•ng mapping n√†y cho implementation th·ª±c t·∫ø!")